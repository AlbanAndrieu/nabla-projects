/*
 * Copyright (c) 2002-2004, Nabla
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice
 *     and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice
 *     and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *
 *  3. Neither the name of 'Nabla' nor 'Alban' nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * License 1.0
 */
/*
 * Copyright (c) 2002-2004, Nabla
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice
 *     and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice
 *     and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *
 *  3. Neither the name of 'Nabla' nor 'Alban' nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * License 1.0
 */
package com.sun.j2ee.blueprints.waf.controller.ejb;

import com.sun.j2ee.blueprints.waf.controller.ejb.action.EJBAction;
import com.sun.j2ee.blueprints.waf.event.Event;
import com.sun.j2ee.blueprints.waf.event.EventException;
import com.sun.j2ee.blueprints.waf.event.EventResponse;

import java.util.HashMap;
import java.util.Map;

import javax.ejb.SessionContext;


/**
 * This class is a responsible for processing Events received from the client tier. As part of the WAF framework the events are generated by web actions. The State Machine ties all EJB components together
 * dynamically at runtime thus providing support for reusable components. This class should not be updated to handle various event types. This class will use ActionHandlers to handle events that require processing
 * beyond the scope of this class. The mapping of the event names to handlers is managed by the JNDI key contained in the Event:getEventName() which is looked up from an environment entry located in the EJB Deployment
 * descriptor of the EJBClientController. A second option to event handling is to do so in the XML file. State may be stored in the attributeMap
 *
 * @author $Author: albandri $
 * @version $Revision: 389 $
 *
 * @since $Date: 2010-10-27 20:02:35 +0200 (mer., 27 oct. 2010) $
 */
public class StateMachine implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    private final EJBControllerLocalEJB ccejb;
    private final Map<String, Object> attributeMap;
    private final Map<String, EJBAction> actionMap;
    private final transient SessionContext sc;

/**
     * Creates a new StateMachine object.
     *
     * @param ccejb DOCUMENT ME!
     * @param sc DOCUMENT ME!
     */
    public StateMachine(final EJBControllerLocalEJB ccejb, final SessionContext sc) {

        this.ccejb = ccejb;
        this.sc = sc;
        this.attributeMap = new HashMap<String, Object>();
        this.actionMap = new HashMap<String, EJBAction>();

    }

    /**
     * DOCUMENT ME!
     *
     * @param ev DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     *
     * @throws EventException DOCUMENT ME!
     */
    public EventResponse processEvent(final Event ev) throws EventException {

        final String actionName = ev.getEJBActionClassName();
        EventResponse response = null;

        if (actionName != null) {

            EJBAction action = null;

            try {

                if (this.actionMap.get(actionName) != null) {

                    action = this.actionMap.get(actionName);

                } else {

                    action = (EJBAction) Class.forName(actionName).newInstance();
                    this.actionMap.put(actionName, action);

                }

            } catch (final Exception ex) {

                System.err.println("StateMachine: error loading " + actionName + " :" + ex);

            }

            if (action != null) {

                action.init(this);

                action.doStart();
                response = action.perform(ev);
                action.doEnd();

            }

        }

        return response;

    }

    /**
     * DOCUMENT ME!
     *
     * @param key DOCUMENT ME!
     * @param value DOCUMENT ME!
     */
    public void setAttribute(final String key, final Object value) {

        this.attributeMap.put(key, value);

    }

    /**
     * DOCUMENT ME!
     *
     * @param key DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     */
    public Object getAttribute(final String key) {

        return this.attributeMap.get(key);

    }

    /**
     * DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     */
    public EJBControllerLocalEJB getEJBController() {

        return this.ccejb;

    }

    /**
     * DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     */
    public SessionContext getSessionContext() {

        return this.sc;

    }

}
