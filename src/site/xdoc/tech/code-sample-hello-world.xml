<?xml version="1.0" encoding="UTF-8"?>

<document>
    <properties>
        <title>
            Nabla : Development Guide : Sample code : Hello World application
        </title>
    </properties>
    <body>
        <section name="Sample Code : The HelloWorld Plugin">
        <subsection name="First implementation">    
            <p>
                This is the simplest plugin implementation. The goal of the plugin is to 
                display the text "Hello, world!". We will use a to achieve this objective,
                we will use an XPageApplication. The plugin name will be <strong>helloworld</strong>
                and the implementation class will be <code>HelloWorldApp</code>. By respecting the 
                naming rules and the internal structure of plugins, the java class will be created 
                in the <code>com.nabla.project.plugins.helloworld.web</code> package.
            </p>
            <p>
                Here is the simplest implementation of this class 
            </p>
            <p>
                <div class="source">
                    <pre>
package com.nabla.project.plugins.helloworld.web;

import com.nabla.project.portal.service.plugin.Plugin;
import com.nabla.project.portal.web.xpages.XPage;
import com.nabla.project.portal.web.xpages.XPageApplication;

import javax.servlet.http.HttpServletRequest;

public class HelloWorldApp implements XPageApplication
{
    public XPage getPage( HttpServletRequest request, int nMode, Plugin plugin )
    {
        XPage page = new XPage(  );
        page.setContent( "Hello, World!" );
        page.setTitle( "Hello, World!" );
        page.setPathLabel( "Hello, World!" );
        return page;
    }
}                       
                    </pre>
                </div>
            </p>
            <p>
                In the first implementation, we create our page by creating a 
                new instance of an XPage and we mention the following attributes:
            </p>
            <p>
                <table>
                    <tr>
                        <th>Attribute</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>content</td>
                        <td>
                            The page content
                        </td>
                    </tr>
                    <tr>
                        <td>title</td>
                        <td>
                            The title of the page(will be displayed in the title bar)
                        </td>
                    </tr>
                    <tr>
                        <td>pathLabel</td>
                        <td>
                            The name of the page in the of the context path of portal.
                        </td>
                    </tr>
                    <tr>
                        <td>keywords</td>
                        <td>
                          The keywords placed in the <em>meta</em> tags of the HTML page.
                        </td>
                    </tr>
                </table>
            </p>
            <p>
                This implementation illustrates the base functions of the 
                application XPage, nevertheless it does not adhere to certain
                elementary development rules which forbid use of hard coded HTML
                or labels variables.A correct implementation is realized by using basic 
                Nabla services.
            </p>
        </subsection>    
        <subsection name="Packaging the plugin">
            <p>
                For a production version,a deployment file is needed. It must be created in the
                <code>WEB-INF/plugins</code> folder and will be called <code>helloworld.xml</code>.
            </p>
            <p>
                Here is the file content :
            </p>
            <p>
                <div class="source">
                    <pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;

&lt;plug-in&gt;

   &lt;!-- Plugin Information --&gt;
   &lt;name&gt;helloworld&lt;/name&gt;
   &lt;class&gt;com.nabla.project.portal.service.plugin.PluginDefaultImplementation&lt;/class&gt;
   &lt;version&gt;2.0&lt;/version&gt;
   &lt;documentation&gt;&lt;/documentation&gt;
   &lt;installation&gt;&lt;/installation&gt;
   &lt;changes&gt;&lt;/changes&gt;
   &lt;user-guide&gt;&lt;/user-guide&gt;
   &lt;description&gt;Application Example&lt;/description&gt;
   &lt;provider&gt;Mairie de Paris&lt;/provider&gt;
   &lt;provider-url&gt;http://nabla.paris.fr&lt;/provider-url&gt;
   &lt;icon-url&gt;images/admin/skin/plugins/helloworld/helloworld.png&lt;/icon-url&gt;
   &lt;copyright&gt;Copyright 2001-2008 Mairie de Paris&lt;/copyright&gt;
   &lt;db-pool-required&gt;0&lt;/db-pool-required&gt;

   &lt;applications&gt;
      &lt;application&gt;
	 &lt;application-id&gt;helloworld&lt;/application-id&gt;
	 &lt;application-class&gt;com.nabla.project.plugins.helloworld.web.HelloWorldApp&lt;/application-class&gt;
      &lt;/application&gt;
   &lt;applications&gt;

&lt;/plug-in&gt;
                        
                    </pre>
                </div>
            </p>
            <p>
                An application icon must be created and stored in the <code>images/admin/skin/plugins/helloworld</code>
                folder.            
            </p>
            <p>
                Here is our application icon  <img src="images/helloworld.png" />
            </p>
        </subsection>
        <subsection name="Second implementation">
            <p>
                The second implementation will place HTML content code in a template file
                and the labels and PathLabel in the plugin's property file.
            </p>
            <p>
                <div class="source">
                    <pre>
package com.nabla.project.plugins.helloworld.web;

import com.nabla.project.portal.service.plugin.Plugin;
import com.nabla.project.portal.util.AppPropertiesService;
import com.nabla.project.portal.util.AppTemplateService;
import com.nabla.project.portal.web.xpages.XPage;
import com.nabla.project.portal.web.xpages.XPageApplication;
import com.nabla.project.util.html.HtmlTemplate;

import javax.servlet.http.HttpServletRequest;

public class HelloWorldApp2 implements XPageApplication
{
    private static final String TEMPLATE_HELLO_WORLD = "site/plugins/helloworld/helloworld.html";
    private static final String PROPERTY_PAGE_TITLE = "helloworld.pageTitle";
    private static final String PROPERTY_PAGE_PATH_LABEL = "helloworld.pagePathLabel";
    
    public XPage getPage( HttpServletRequest request, int nMode, Plugin plugin )
    {
        XPage page = new XPage(  );
        
        HtmlTemplate template = <strong>AppTemplateService.getTemplate</strong>( TEMPLATE_HELLO_WORLD );
        String strPageTitle = <strong>AppPropertiesService.getProperty</strong>( PROPERTY_PAGE_TITLE );
        String strPagePathLabel = <strong>AppPropertiesService.getProperty</strong>( PROPERTY_PAGE_PATH_LABEL );

        page.setContent( template.getHtml() );
        page.setTitle( strPageTitle );
        page.setPathLabel( strPagePathLabel );
        
        return page;
    }
}                  </pre>
                </div>
            </p>
            <p>
                This implementation needs creation of 
                <code>helloworld.html</code> HTML file in the folder 
                <code>WEB-INF/templates/skin/plugins/helloworld</code>
            </p>
            <p>
                Here is the content of the file :
            </p>
            <p>
                <div class="source">
                    <pre>
&lt;center&gt;
    &lt;h1&gt;
        Hello, World!
    &lt;/h1&gt;
&lt;/center&gt;                        
                    </pre>
                </div>
            </p>
            <p>
                <code>helloworld.properties</code> must be created  in the 
                 <code>WEB-INF/conf/plugins</code> folder.
            </p>
            <p>
                Here is the content of the file :
           </p>
            <p>
                <div class="source">
                    <pre>
# configuration file of helloworld plugin

helloworld.pageTitle=Hello World Application
helloworld.pagePathLabel=Hello World
                    </pre>
                </div>
            </p>
        </subsection>
        <subsection name="Third implementation of the plugin (Multilingual)">
            <p>
                Here is the last implementation which allows to realizing an application
                in several languages.Nabla uses internalization functions through
                 <code>I18nService</code> service to achieve this.
            </p>
            <p>
                To generate the resources in several languages, a property file
                corresponding to each language must be placed in the <code>com.nabla.project.plugins.helloworld.resources</code>
                package.          
            </p>
            <p>
                <ul>
                    <li><code>helloworld_messages.properties</code> - default language</li>
                    <li><code>helloworld_messages_fr.properties</code> - french</li>
                    <li><code>helloworld_messages_fr_FR.properties</code> - french (France)</li>
                    <li><code>helloworld_messages_fr_CA.properties</code> - french (Canada)</li>
                    <li><code>helloworld_messages_en_US.properties</code> - english (USA)</li>
                    <li><code>...</code></li>
                </ul>
            </p>
            <p>
                Here is the content of the file <code>helloworld_messages_fr.properties</code> :
                <div class="source">
                    <pre>
# resources file for plugin helloworld in french

content=Bonjour le Monde !
pageTitle=Application Bonjour le Monde 
pagePathLabel=Bonjour le Monde 
                    </pre>
                </div>
            </p>
            <p>
                Here is the new file content <code>heloworld.html</code> : 
            </p>
            <p>
                <div class="source">
                    <pre>
&lt;center&gt;
    &lt;h1&gt;
        #i18n{helloworld.content}
    &lt;/h1&gt;
&lt;/center&gt;                        
                    </pre>
                </div>
            </p>
            <p>
                Finally, Application must be updated as follows :
            </p>
            <p>
                <div class="source">
                    <pre>
package com.nabla.project.plugins.helloworld.web;

import com.nabla.project.portal.service.plugin.Plugin;
import com.nabla.project.portal.service.i18n.I18nService;
import com.nabla.project.portal.util.AppPropertiesService;
import com.nabla.project.portal.util.AppTemplateService;
import com.nabla.project.portal.web.xpages.XPage;
import com.nabla.project.portal.web.xpages.XPageApplication;
import com.nabla.project.util.html.HtmlTemplate;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

public class HelloWorldApp3 implements XPageApplication
{
    private static final String TEMPLATE_HELLO_WORLD = "site/plugins/helloworld/helloworld.html";
    private static final String PROPERTY_PAGE_TITLE = "helloworld.pageTitle";
    private static final String PROPERTY_PAGE_PATH_LABEL = "helloworld.pagePathLabel";
    
    public XPage getPage( HttpServletRequest request, int nMode, Plugin plugin )
    {
        XPage page = new XPage(  );
        
        Locale locale = request.getLocale();
        HtmlTemplate template = AppTemplateService.getTemplate( TEMPLATE_HELLO_WORLD , locale );
        String strPageTitle = I18nService.getLocalizedString( PROPERTY_PAGE_TITLE , locale );
        String strPagePathLabel = I18nService.getLocalizedString( PROPERTY_PAGE_PATH_LABEL , locale );

        page.setContent( template.getHtml() );
        page.setTitle( strPageTitle );
        page.setPathLabel( strPagePathLabel );
        
        return page;
    }
}                    </pre>
                </div>
            </p>
        </subsection>
        </section>
    </body>
</document>
