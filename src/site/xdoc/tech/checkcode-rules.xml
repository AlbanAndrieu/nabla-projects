<?xml version="1.0" encoding="UTF-8"?>
  <document>
      <properties>
          <title>
              Nabla : Règles Checkstyle et PMD
          </title>
      </properties>
      <body>
          <section name="Tableau des règles Checkstyle et PMD">
              <p>
                  Le tableau suivant décrit les règle des outils Checkstyle et PMD retenue
                  pour l'analyse du code. L'abréviation <strong>c</strong> dans la colonne <em>outil</em> correspondant
                  à <a href="http://checkstyle.sourceforge.net/">Checkstyle</a>, <strong>p</strong> à <a href="http://pmd.sourceforge.net/">PMD</a>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Règles de nommage</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Variables locales, finales</td>
                          <td>^[A-Z]*$ - strict (TODO) : strName, nName ou lName </td>
                          <td>c</td>
                          <td>LocalFinalVariableName</td>
                      </tr>
                      <tr>
                          <td>Variables locales, non finales- attention, paramètres de "catch" inclus</td>
                          <td>^[a-z][a-zA-Z0-9]*$  - strict (TODO) : strName, nName ou lName </td>
                          <td>c</td>
                          <td>LocalVariableName</td>
                      </tr>
                      <tr>
                          <td>Attributs non statiques</td>
                          <td>^_[a-z](_?[a-zA-Z0-9])*$ - strict (TODO) : strName, nName ou lName </td>
                          <td>c</td>
                          <td>MemberName</td>
                      </tr>
                      <tr>
                          <td>Paramètres</td>
                          <td>^[a-z][a-zA-Z0-9]*$  - strict (TODO) : strName, nName ou lName </td>
                          <td>c</td>
                          <td>ParameterName</td>
                      </tr>
                      <tr>
                          <td>Constantes (champs statiques et finaux)</td>
                          <td>^[A-Z0-9]*$</td>
                          <td>c</td>
                          <td>ConstantName</td>
                      </tr>
                      <tr>
                          <td>Variables statiques, non finales</td>
                          <td>^_[a-z](_?[a-zA-Z0-9])*$  - strict (TODO) : strName, nName ou lName </td>
                          <td>c</td>
                          <td>StaticVariableName</td>
                      </tr>
                      <tr>
                          <td>Méthode</td>
                          <td>[a-z][a-zA-Z0-9]*$</td>
                          <td>c</td>
                          <td>MethodName</td>
                      </tr>
                      <tr>
                          <td>Classe (et interface)</td>
                          <td>^[A-Z][a-zA-Z0-9]*$</td>
                          <td>c</td>
                          <td>TypeName</td>
                      </tr>
                      <tr>
                          <td>Package</td>
                          <td>^fr\.paris\.[a-z\.]*$</td>
                          <td>c</td>
                          <td>PackageName</td>
                      </tr>
                      <tr>
                          <td>Classes abstraites</td>
                          <td>strict seulement : mot clé abstract</td>
                          <td>c</td>
                          <td>AbstractClassName</td>
                      </tr>
                      <tr>
                          <td>Longueur max d'une variable</td>
                          <td>80 - strict 50</td>
                          <td>p</td>
                          <td>LongVariable</td>
                      </tr>
                      <tr>
                          <td>Longueur min du nom d'une méthode</td>
                          <td>3</td>
                          <td>p</td>
                          <td>ShortMethodNameRule</td>
                      </tr>
                      <tr>
                          <td>Longueur min du nom d'une variable</td>
                          <td>non retenu</td>
                          <td>p</td>
                          <td>ShortVariable</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Règles non retenues (redondantes)</th>
                          <th>&#160;</th>
                      </tr>
                      <tr>
                          <td>PMD</td>
                          <td>VariableNamingConventionRule, MethodNamingConvention, 
                          ClassNamingConventionRule, AbstractNamingRule</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>En-tête de fichiers</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Les fichiers doivent tous contenir le même en-tête</td>
                          <td>${checkstyle.header.file}</td>
                          <td>c</td>
                          <td>header</td>
                      </tr>
                      <tr>
                          <td>L'en-tête doit correspondre à une expression régulière</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>RegexpHeader</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Imports</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Imports inutiles : dupliqué, java.lang.* ou du même package</td>
                          <td>na</td>
                          <td>c</td>
                          <td>RedondantImports</td>
                      </tr>
                      <tr>
                          <td>Idem précédent + import inutilisée</td>
                          <td>na</td>
                          <td>c</td>
                          <td>UnusedImports</td>
                      </tr>
                      <tr>
                          <td>Les imports ne doivent pas utiliser *</td>
                          <td>na</td>
                          <td>c</td>
                          <td>AvoidStarImport</td>
                      </tr>
                      <tr>
                          <td>Vérifie l'ordre des imports (java, puis javax, …)</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>ImportOrder</td>
                      </tr>
                      <tr>
                          <td>Rejette les packages illegaux (par défaut, slt ceux de sun.*)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>IllegalImport</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Règles non retenues (redondantes)</th>
                          <th>&#160;</th>
                      </tr>
                      <tr>
                          <td>PMD</td>
                          <td>ImportFromSamePackage, UnusedImports, DontimportJavaLang, 
                          DuplicateImport</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Non respect de longueur</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Longueur max d'une méthode</td>
                          <td>par défaut : 100 lignes, en comptant les commentaires et les lignes vides</td>
                          <td>p</td>
                          <td>ExcessiveMethodLength</td>
                      </tr>
                      <tr>
                          <td>Longueur max d'une classe</td>
                          <td>par défaut : 1000 lignes, en comptant les commentaires et les lignes vides</td>
                          <td>p</td>
                          <td>ExcessiveClassLength</td>
                      </tr>
                      <tr>
                          <td>Nombre max de parametres</td>
                          <td>par défaut : 7</td>
                          <td>c</td>
                          <td>ParameterNumber</td>
                      </tr>
                      <tr>
                          <td>complexité : nombre de points de décision 
                          (if, while, do, for, ?:, catch, switch, &amp;&amp;, || et case) + 1 
                          pour la méthode</td>
                          <td>10 - strict seulement</td>
                          <td>p</td>
                          <td>CyclomaticComplexityRule</td>
                      </tr>
                      <tr>
                          <td>Nombre max de commandes executables</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>ExecutableStatementCount</td>
                      </tr>
                      <tr>
                          <td>Longueur max d'un fichier</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>FileLenght</td>
                      </tr>
                      <tr>
                          <td>Longueur max d'une ligne</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>LineLength</td>
                      </tr>
                      <tr>
                          <td>Longueur max pour une classe anonyme interne</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>AnonInnerLenght</td>
                      </tr>
                      <tr>
                          <td>Nombre de méthodes et d'attributs publics</td>
                          <td>45</td>
                          <td>p</td>
                          <td>ExcessivePublicCount</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Règles non retenues (redondantes)</th>
                          <th>&#160;</th>
                      </tr>
                      <tr>
                          <td>PMD</td>
                          <td>ExcessiveParameterList</td>
                      </tr>
                      <tr>
                          <td>Checkstyle</td>
                          <td>MethodLenght, CyclomaticComplexity</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Espaces</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Espace non autorisé si un des éléments du for est vide : for(int i;;i++)</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>EmptyForIteratorPad</td>
                      </tr>
                      <tr>
                          <td>Seuls = et == peuvent (doivent) être suivis par un espace</td>
                          <td>token=ASSIGN, EQUAL</td>
                          <td>c</td>
                          <td>WhitespaceAround</td>
                      </tr>     
                      <tr>
                          <td>Les parenthèses doivent avoir des espaces</td>
                          <td>space</td>
                          <td>c</td>
                          <td>ParenPad</td>
                      </tr>    
                      <tr>
                          <td>Vérifie qu'il n'y a pas d'espace après certains operateurs</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>NoWhiteSpaceAfter</td>
                      </tr>              
                      <tr>
                          <td>Vérifie qu'il n'y a pas d'espace avant certains operateurs</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>NoWhiteSpaceBefore</td>
                      </tr>                            
                      <tr>
                          <td>Vérifie la façon de gérer les longues lignes après les opérateurs</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>OperatorWrap</td>
                      </tr>              
                      <tr>
                          <td>Vérifie les espaces pour le cas particulier des cast</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>TypeCastParenPad</td>
                      </tr>              
                      <tr>
                          <td>Vérifie qu'il n'y a pas de tab dans le code source</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>TabCharacter</td>
                      </tr>              
                      <tr>
                          <td>Vérifie que les éléments listés sont bien suivis par un espace</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>WhiteSpaceAfter</td>
                      </tr>              
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Qualificatifs</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>L'ordre des qualificatifs est : public - protected - private - abstract - static - final - transient - volatile - synchronized - native - strictfp</td>
                          <td>na</td>
                          <td>c</td>
                          <td>ModifierOrder</td>
                      </tr>       
                      <tr>
                          <td>Les interfaces ne sont ni publiques ni abstraites, les methodes et attributs prives d'une classe finale ne sont pas finaux, dans une interfaces les variables ne sont ni publiques ni statiques ni finales</td>
                          <td>na</td>
                          <td>c</td>
                          <td>RedundantModifier</td>
                      </tr>                   
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Blocs</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Les blocs ne peuvent pas être vides (concerne : catch, do, else, finally, if, for, try, while et init)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>EmptyBlock</td>
                      </tr>   
                      <tr>
                          <td>Les blocs switch sont non vides</td>
                          <td>na</td>
                          <td>p</td>
                          <td>EmptySwitchStatements</td>
                      </tr>       
                      <tr>
                          <td>Les blocs synchronized sont non vides</td>
                          <td>na</td>
                          <td>p</td>
                          <td>EmptySynchronizedBlock</td>
                      </tr>     
                      <tr>
                          <td>Vérifie que les accolades ouvrantes ( { ) vont à la ligne</td>
                          <td>na</td>
                          <td>c</td>
                          <td>LeftCurly</td>
                      </tr>     
                      <tr>
                          <td>Vérifie que les blocs de code sont bien entourés d'accolades {}</td>
                          <td>na</td>
                          <td>c</td>
                          <td>NeedBraces</td>
                      </tr>      
                      <tr>
                          <td>Vérifie que les accolades fermantes ( } ) vont à la ligne</td>
                          <td>na</td>
                          <td>c</td>
                          <td>RightCurly</td>
                      </tr>   
                      <tr>
                          <td>Vérifie qu'il ne reste pas de bloc {} qui ne servent plus dans le code (laissés après un debuggage)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>AvoidNestedBlocks</td>
                      </tr>       
                  </table>
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Règles non retenues (redondantes)</th>
                          <th>&#160;</th>
                      </tr>
                      <tr>
                          <td>PMD</td>
                          <td>EmptyCatchBlock, EmptyIfStmt, EmptyWhileStmt, EmptyTryBlock, EmptyFinallyBlock, IfStmtsMustUseBraces, WhileLoopsMustUseBracesRule, IfElseStmtsMustUseBracesRule, ForLoopsMustUseBracesRule</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Problèmes de code</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Eviter les syntaxes de type "<code> ?: </code>"</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>AvoidInlineConditionals</td>
                      </tr>   
                      <tr>
                          <td>
                               Vérifier si un test est imbriqué dans un synchronize qui est lui-même imbriqué dans le même test
                               EX : <code>if ( theInstance == null ) { synchronized( MySingleton.class ) { if ( theInstance == null ) { theInstance = new MySingleton();  }}}</code>                         
                          </td>
                          <td>na</td>
                          <td>c</td>
                          <td>Double checked locking</td>
                      </tr>    
                      <tr>
                          <td>Détecter les instructions vides (;)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>EmptyStatement</td>
                      </tr>     
                      <tr>
                          <td>Si on surcharge equals [resp hashcode] alors on doit surcharger hashcode [resp equals]</td>
                          <td>na</td>
                          <td>c</td>
                          <td>EqualsHashCode</td>
                      </tr>    
                      <tr>
                          <td>Une variable ou un paramètre local ne doit pas risquer d'écraser un attribut</td>
                          <td>na</td>
                          <td>c</td>
                          <td>HiddenField</td>
                      </tr> 
                      <tr>
                          <td>Simplifier les retours de booleens - ex : on doit avoir return (! isValid()) au lieu de if (isValid()) return false; else return true;</td>
                          <td>na</td>
                          <td>c</td>
                          <td>SimplifyBooleanReturn</td>
                      </tr>  
                      <tr>
                          <td>Inutile de tester avec == true ou !false …</td>
                          <td>na</td>
                          <td>c</td>
                          <td>SimplifyBooleanExpression</td>
                      </tr> 
                      <tr>
                          <td>Vérifie que l'on n'a pas de nombre qui ne soit pas une constante (à part -, 0, 1, et 2) </td>
                          <td>strict seulement</td>
                          <td>c</td>
                          <td>MagicNumber</td>
                      </tr>   
                      <tr>
                          <td>Vérifie que les switch on bien un default case</td>
                          <td>na</td>
                          <td>c</td>
                          <td>MissingSwitchDefault</td>
                      </tr>  
                      <tr>
                          <td>Vérifie qu'il ne reste pas une virgule après le dernier élément en initialisant un array</td>
                          <td>na</td>
                          <td>c</td>
                          <td>ArrayTrailingComma</td>
                      </tr>       
                      <tr>
                          <td>Vérifie que si on définit un "equals" on a surchargé aussi "equals(java.lang.Object)"</td>
                          <td>na</td>
                          <td>c</td>
                          <td>CovariantEquals</td>
                      </tr>   
                      <tr>
                          <td>Vérifie que l'on définit bien dans l'ordre : les attributs statiques, publics, protected, ceux pour le package (sans getter ni setter), privés; les constructeurs; les méthodes.</td>
                          <td>na</td>
                          <td>c</td>
                          <td>DeclarationOrder</td>
                      </tr> 
                      <tr>
                          <td>Vérifie que l'on n'initialise pas des objets inutilement (comme int i=0; ou object o=null;)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>ExplicitInitialization</td>
                      </tr>                                        
                      <tr>
                          <td>Les paramètres et variables qui ne sont jamais modifiés doivent être déclarés "final"</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>FinalLocalVariable</td>
                      </tr>  
                      <tr>
                          <td>Vérifie que l'on ne catche pas de "mauvaise" exception (<code>java.lang.Exception</code>, <code>java.lang.Error</code> ou <code>java.lang.RuntimeException</code>)</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>FinalLocalVariable</td>
                      </tr>        
                      <tr>
                          <td>Vérifie que l'on utilise bien des factory quand il le faut</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>IllegalInstantiation</td>
                      </tr>                          
                      <tr>
                          <td>Interdit certains token (comme ++)</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>IllegalToken</td>
                      </tr>     
                      <tr>
                          <td>Interdit les valeurs definies par type (par ex : pas de string qui ont la valeur "a href", pas d'entier qui commence par 0, …)</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>IllegalTokenText</td>
                      </tr>   
                      <tr>
                          <td>Interdit certains type/certaines classes</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>IllegalType</td>
                      </tr> 
                      <tr>
                          <td>Interdit les affectations dans les expressions</td>
                          <td>na</td>
                          <td>c</td>
                          <td>InnerAssignment</td>
                      </tr>     
                      <tr>
                          <td>Limite le nombre de if-else imbriqués</td>
                          <td>3</td>
                          <td>c</td>
                          <td>NestedIfDepth</td>
                      </tr>      
                      <tr>
                          <td>Limite le nombre de try imbriqués</td>
                          <td>3</td>
                          <td>c</td>
                          <td>NestedTryDepth</td>
                      </tr>                            
                      <tr>
                          <td>Chaque classe doit avoir un packages</td>
                          <td>na</td>
                          <td>c</td>
                          <td>PackageDeclaration</td>
                      </tr>    
                      <tr>
                          <td>Les paramètres ne doivent pas être affectés</td>
                          <td>na</td>
                          <td>c</td>
                          <td>ParameterAssignment</td>
                      </tr>   
                      <tr>
                          <td>Vérifie que l'on ne lance pas 2 fois la même exception, ni une exception "unchecked", ni une exception qui soit une sous classe d'une exception déjà lancée</td>
                          <td>na</td>
                          <td>c</td>
                          <td>RedundantThrows</td>
                      </tr>         
                      <tr>
                          <td>Limite le nombre de return</td>
                          <td>5</td>
                          <td>c</td>
                          <td>ReturnCount</td>
                      </tr>           
                      <tr>
                          <td>Vérifie que l'on ne compare pas de strings avec == ou !=</td>
                          <td>na</td>
                          <td>c</td>
                          <td>StringLiteralEquality</td>
                      </tr>    
                      <tr>
                          <td>Vérifie que lorsqu'on surcharge clone(), on appelle super.clone()</td>
                          <td>na</td>
                          <td>c</td>
                          <td>SuperClone</td>
                      </tr>         
                      <tr>
                          <td>Vérifie que lorsqu'on surchage finalize(), on appelle super.finalize()</td>
                          <td>na</td>
                          <td>c</td>
                          <td>SuperFinalize</td>
                      </tr> 
                      <tr>
                          <td>Vérifie l'imbrication de boucles for</td>
                          <td>2</td>
                          <td>p</td>
                          <td>JumbledIncrementer</td>
                      </tr>  
                      <tr>
                          <td>Certaines boucles for peuvent/doivent être remplacées par des while</td>
                          <td>na</td>
                          <td>p</td>
                          <td>ForLoopShouldBeWhileLoop</td>
                      </tr>                                      
                      <tr>
                          <td>Il vaut mieux convertir dans le return que dans une variable temporaire</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnnecessaryConversionTemporaryRule</td>
                      </tr>        
                      <tr>
                          <td>Vérifie que l'on ne fait pas de return dans un finally</td>
                          <td>non retenu</td>
                          <td>p</td>
                          <td>ReturnFromFinallyBlock</td>
                      </tr>                           
                      <tr>
                          <td>Détecte les return; inutiles</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnnecessaryReturn</td>
                      </tr>                                   
                      <tr>
                          <td>Détecte les champs privés non utilisés</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnusedPrivateField</td>
                      </tr>
                      <tr>
                          <td>Détecte les variables locales non utilisées</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnusedLocalVariable</td>
                      </tr>            
                      <tr>
                          <td>Détecte les méthodes privées non utilisées</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnusedPrivateMethod</td>
                      </tr>            
                      <tr>
                          <td>Détecte les paramètres non utilisés</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnusedFormalParameter</td>
                      </tr>            
                      <tr>
                          <td>Une classe qui n'a que des méthodes statiques devrait être un singleton</td>
                          <td>na en strict seulement</td>
                          <td>p</td>
                          <td>UnusedLocalVariable</td>
                      </tr>            
                      <tr>
                          <td>Utiliser l'interface (ex : Set) plutot que son implementation (ex HashSet)</td>
                          <td>na</td>
                          <td>p</td>
                          <td>LooseCouplingRule</td>
                      </tr>            
                      <tr>
                          <td>Il vaut mieux utiliser une variable locale que de réutiliser un paramètre</td>
                          <td>na</td>
                          <td>p</td>
                          <td>AvoidReassigningParametersRule</td>
                      </tr>
                      <tr>
                          <td>Vérifie la taille du switch (longueur max du case)</td>
                          <td>5</td>
                          <td>p</td>
                          <td>SwitchDensity</td>
                      </tr>            
                      <tr>
                          <td>Le constructeur ne doit pas appeler de méthode surchargée</td>
                          <td>na</td>
                          <td>p</td>
                          <td>ConstructorCallsOverridableMethodRule</td>
                      </tr>            
                      <tr>
                          <td>Ne pas appeler de constructeur privé en dehors de la classe du constructeur</td>
                          <td>na</td>
                          <td>p</td>
                          <td>AccessorClassGenerationRule</td>
                      </tr>            
                      <tr>
                          <td>Un champ final constant doit être statique</td>
                          <td>na</td>
                          <td>p</td>
                          <td>FinalFieldCouldBeStatic</td>
                      </tr>            
                      <tr>
                          <td>Les connexions doivent toujours être fermées</td>
                          <td>strict seulement</td>
                          <td>p</td>
                          <td>CloseConnectionRule</td>
                      </tr>            
                      <tr>
                          <td>Si la même chaine est utilisée plusieurs fois, elle doit devenir une constante</td>
                          <td>4</td>
                          <td>p</td>
                          <td>AvoidDuplicateLiterals</td>
                      </tr>  
                      <tr>
                          <td>Ne pas instantier les strings avec un new</td>
                          <td>na</td>
                          <td>p</td>
                          <td>StringInstantiation</td>
                      </tr>                         
                      <tr>
                          <td>Inutile d'utiliser toString() sur un string</td>
                          <td>na</td>
                          <td>p</td>
                          <td>StringToString</td>
                      </tr>    
                      <tr>
                          <td>Considère qu'un objet est trop couplé avec un autre si le nombre d'attributs, variables locales et types retournés est trop important</td>
                          <td>20</td>
                          <td>p</td>
                          <td>CouplingBetweenObjectsRule</td>
                      </tr>                        
                      <tr>
                          <td>Trop d'imports indique que l'objet est trop couplé</td>
                          <td>25</td>
                          <td>p</td>
                          <td>ExcessiveImportsRule</td>
                      </tr>   
                      <tr>
                          <td>Une méthode ne doit pas lancer d'exception de type Exception</td>
                          <td>non retenu</td>
                          <td>p</td>
                          <td>SignatureDeclareThrowsException</td>
                      </tr>                
                      <tr>
                          <td>Il est plus propre de catcher chaque type d'exception (plutot que de catcher "Exception" et de faire des instanceof ensuite)</td>
                          <td>na</td>
                          <td>p</td>
                          <td>ExceptionTypeChecking</td>
                      </tr>                                
                  </table>
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Règles non retenues (redondantes)</th>
                          <th>&#160;</th>
                      </tr>
                      <tr>
                          <td>PMD</td>
                          <td>OverrideBothEqualsAndHashcodeRule, DoubleCheckedLockingRule, SimplifyBooleanReturnsRule, SimplifyBooleanExpressions, SwitchStmtsShouldHaveDefault, AvoidDeeplyNestedIfStmts, BooleanInstantiation, ProperCloneImplementationRule, AvoidCatchingThrowable, AssignmentInOperandRule</td>
                      </tr>
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Problèmes de design</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Une méthode non privée et non statique d'une classe qui peut être spécialisée doit être ou abstraite, ou finale, ou vide</td>
                          <td>na strict seulement</td>
                          <td>c</td>
                          <td>DesignForExtension</td>
                      </tr> 
                      <tr>
                          <td>Une classe qui n'a que des constructeurs privés doit être déclarée finale</td>
                          <td>na</td>
                          <td>c</td>
                          <td>FinalClass</td>
                      </tr>   
                      <tr>
                          <td>Une classe qui ne contient que des méthodes statiques ne doit pas avoir de constructeur public</td>
                          <td>na</td>
                          <td>c</td>
                          <td>HideUtilityClassConstructor</td>
                      </tr>
                      <tr>
                          <td>Les interfaces ne doivent définir que des types (pas d'interface qui ne contient aucune methode, que des constantes)</td>
                          <td>na strict seulement</td>
                          <td>c</td>
                          <td>InterfaceIsType</td>
                      </tr>
                      <tr>
                          <td>Seuls les attributs statiques ET finaux peuvent être publics</td>
                          <td>na</td>
                          <td>c</td>
                          <td>VisibilityModifier</td>
                      </tr>                           
                      <tr>
                          <td>Vérifie que les classes d'exceptions n'ont que des champs finaux</td>
                          <td>na</td>
                          <td>c</td>
                          <td>MutableException</td>
                      </tr>
                      <tr>
                          <td>Vérifie le nombre max de throw</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>ThrowsCount </td>
                      </tr>       
                      <tr>
                          <td>Détecte quand il n'y a qu'un seul constructeur, public, vide et sans argument</td>
                          <td>non retenu</td>
                          <td>p</td>
                          <td>UnnecessaryConstructorRule</td>
                      </tr>
                      <tr>
                          <td>Vérifie qu'on n'assigne pas "null" à des objets</td>
                          <td>na</td>
                          <td>p</td>
                          <td>NullAssignment</td>
                      </tr>
                      <tr>
                          <td>Vérifie qu'il n'y a qu'un seul retour par fonction</td>
                          <td>non retenu</td>
                          <td>p</td>
                          <td>OnlyOneReturn</td>
                      </tr>
                      <tr>
                          <td>Détecte les "public static" etc inutiles</td>
                          <td>na</td>
                          <td>p</td>
                          <td>UnusedModifier</td>
                      </tr>                 
                      <tr>
                          <td>Oblige chaque classe à avoir un constructeur</td>
                          <td>non retenu</td>
                          <td>p</td>
                          <td>AtLeastOneConstructor</td>
                      </tr>
                      <tr>
                          <td>Déclarer finalize() protected si on le surcharge</td>
                          <td>na</td>
                          <td>p</td>
                          <td>FinalizeShouldBeProtected</td>
                      </tr>  
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Javadoc</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Chaque package doit avoir un fichier package.html</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>PackageHtml</td>
                      </tr>
                      <tr>
                          <td>Vérifie qu'il y a un javadoc pour la classe (ou l'interface)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>JavadocType</td>
                      </tr> 
                      <tr>
                          <td>Les variables doivent être commentées)</td>
                          <td>strict seulement</td>
                          <td>c</td>
                          <td>JavadocVariable</td>
                      </tr>
                      <tr>
                          <td>Les classes doivent être commentées (au minimum : @return, @param, @throws et @see)</td>
                          <td>na</td>
                          <td>c</td>
                          <td>JavadocMethod</td>
                      </tr>
                      <tr>
                          <td>Valide le contenu des commentaires : phrase complète, tags HTML bien formés, …</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>JavadocStyle</td>
                      </tr>  
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Junit</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Il est nécessaire d' utiliser les assertions avec message</td>
                          <td>na</td>
                          <td>p</td>
                          <td>JUnitAssertionsShouldIncludeMessageRule</td>
                      </tr>
                      <tr>
                          <td>suite() doit être publique ET statique</td>
                          <td>na</td>
                          <td>p</td>
                          <td>JUnitStaticSuite</td>
                      </tr>
                      <tr>
                          <td>Vérifie que setUp et tearDown sont bien orthographiées</td>
                          <td>na</td>
                          <td>p</td>
                          <td>JUnitSpelling</td>
                      </tr>   
                  </table>
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <br />
              </p>
              <p>
                  <table>
                      <tr>
                          <th>Fonctionnalité</th>
                          <th>Valeur</th>
                          <th>Outils</th>
                          <th>Nom de la règle dans l'outil</th>
                      </tr>
                      <tr>
                          <td>Divers</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                          <td>&#160;</td>
                      </tr>
                      <tr>
                          <td>Détecte le code dupliqué</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>StrictDuplicateCode</td>
                      </tr>
                      <tr>
                          <td>Vérifie que la déclaration d'un tableau est conforme au style retenu (Java-style: <code>public static void main(String[] args)</code>  ou C-style: <code>public static void main(String args[]))</code></td>
                          <td>style Java</td>
                          <td>c</td>
                          <td>ArrayTypeStyle</td>
                      </tr>   
                      <tr>
                          <td>Restreint certains tokens à l'intérieur de certains autres</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>DescendantToken</td>
                      </tr> 
                      <tr>
                          <td>Vérifie que les paramètres sont finaux (sauf pour les interfaces)</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>FinalParameters</td>
                      </tr>
                      <tr>
                          <td>"grep" pour une expression régulière donnée</td>
                          <td>System\.out\.println, System\.exit</td>
                          <td>c</td>
                          <td>GenericIllegalRegexp</td>
                      </tr> 
                      <tr>
                          <td>Vérifie l'indentation</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>Indentation</td>
                      </tr> 
                      <tr>
                          <td>Vérifie que tous les fichiers terminent bien par un retour a la ligne</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>NewlineAtEndOfFile</td>
                      </tr>
                      <tr>
                          <td>Cherche les commentaires "TODO: "</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>TodoComment</td>
                      </tr>
                      <tr>
                          <td>Vérifie que les fichiers properties de différents langages contiennent les mêmes clés</td>
                          <td>na</td>
                          <td>c</td>
                          <td>Translation</td>
                      </tr>
                      <tr>
                          <td>Détecte les méthodes main non commentées</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>UncommentedMain</td>
                      </tr>
                      <tr>
                          <td>Les constantes de type long doivent commencer par L</td>
                          <td>non retenu</td>
                          <td>c</td>
                          <td>UpperEll</td>
                      </tr> 
                  </table>
              </p>
          </section>
      </body>
  </document>