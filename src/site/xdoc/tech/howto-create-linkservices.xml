<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>
            Nabla : Development Guide : Link Services
        </title>
    </properties>
    <body>
        <section name="Crate a new LinkService">
            <subsection name="Folder structure of InsertService">
                <p>
                    A plugin which provides an insertion service of HTML code or
                    an insertion service of links must implement
                    the <code>HtmlService</code> or <code>LinkService</code> interface.
                    <center>
                        <img src="images/linkservice.gif" />
                    </center>
                    The InsertService is composed by :
                </p>
                <p>
                    <ul>

                        <li>
                             A parent interface generalizing the notion of InsertService and
                             providing an abstract method <code>getSelectorUI</code> which
                             gives access to the the user interface of the object to be inserted ;
                        </li>
                        <li>
                             An <code>LinkService</code> interface modelizing the link insertion Services 
                             and providing a method returning the <code>LinkServiceSelectionBean</code> 
                             selection class;
                        </li>
                        <li>
                             A <code>HtmlService</code> interface modelizing the HTML code insertion services
                             and providing a method returning the  
                             <code>HtmlServiceSelectionBean</code> selection class;
                        </li>
                        <li>
                              abstract classes,<code>DefaultLinkService</code> 
                             and <code>DefaultHtmlService</code>, facilitating implementation
                             of the 2 interfaces above.
                        </li>
                    </ul>
                </p>
                <p>
                    Note : A plugin may consist of both a LinkService and an HtmlService ;
                </p>
            </subsection>
            <subsection name="Saving Service">
                <p>
                    The service concerning 2 functions rather similar,we opted for
                    a single service : InsertServiceManager.
                </p>
                <p>
                    Methods allowing fetching seperately  
                    « HtmlService » , « LinkService » or all InsertServices.
                </p>
            </subsection>
            <subsection name="Link selection's interace">
                <p>
                    As in the Nabla 1.0 version, the link selection or object to be inserted
                    in an HTML editor is done through a popup window.
                </p>
                <p>
                    This allows to keep user session and avoids persisting data , 
                    already entered (saving data in the HTML editor is performed
                    before calling the insertion service  ).
                </p>
            </subsection>
            <subsection name="Return code insertion">
                <p>
                    Implementation depends on the previous choice and the wish to
                    persist or not already entered data.
                </p>
                <p>
                    Insertion of HTML code corresponding to the selected object is
                    done through a javascript function proposed by the caller :
                </p>
                <p>
                    <code>insert_html (String ChaineAInsérer)</code>.
                </p>
            </subsection>
            <subsection name="Saving services">
                <p>
                    Implementations of InsertService are saved on plugin loading.
                    
                    A &lt;html-service&gt; (link-service) section must be added in
                    the plugin'sconfiguration file :
                </p>    
                <p>    
                    <div class="source">
                        <pre>
&lt;!-- Links Service --&gt;
&lt;link-service&gt;
    &lt;link-service-id&gt;mylinkservice&lt;/link-service-id&gt;
    &lt;link-service-class&gt;com.nabla.project.plugins.mylinkservice.service.MyLinkService&lt;/link-service-class&gt;
    &lt;link-service-bean-class&gt;com.nabla.project.plugins.mylinkservice.web.MyLinkServiceJspBean&lt;/link-service-bean-class&gt;
    &lt;link-service-label&gt;Link to my URIs&lt;/link-service-label&gt;
&lt;/link-service&gt;    </pre>
                    </div>
                </p>
            </subsection>
            <subsection name="Extension of DefaultHTMLService (or DefaultLinkService)">
                <p>
                    Extend <code>DefaultHTMLService</code> (resp. DefaultLinkService) 
                    by implementing <code>getPluginName</code> method :
                </p>
                <p>
                    <div class="source">
                        <pre>
public class MyHtmlService extends DefaultHtmlService 
{
    /** The plugin name. */
    private static final String PLUGIN_NAME = "myhtmlservice";

    public String getPluginName() 
    {
        return PLUGIN_NAME;
    }
}
                        </pre>
                    </div>
                </p>
            </subsection>

 
            <subsection name="Implementation of HtmlServiceSelectionBean (or LinkServiceSelectionBean)">
                <p>
                    A JSPBean, implementing the HtmlServiceSelectionBean's interface and containing a getHtmlSelectorUI() method, is needed.
                    
                </p>
                <p>
                    <code>ImageLibraryJspBean</code> example for ImageLibrary plugin.
                </p>
            </subsection>
            <subsection name="Insertion of HTML code">
                <p>
                    The cut and paste of HTML code to be inserted is done in javascript
                    by calling the <code>opener.insert_html(strCodeHTMLAInserer)</code> method.
                </p>
                <p>
                    Exemple taken from imageLibrary :
                </p>
                <p>
                    <div class="source">
                        <pre>
...
_buffer = _buffer + _hspace + _vspace + _width + _height + _align + ">";

if (opener != null)
{
   // The caller must provide an insert_html method
   opener.insert_html(_buffer);
   window.close();
} 
else 
{
   alert("HTML editor is not accessible!" );
}
                        </pre>
                    </div>
                </p>
            </subsection>
 
            <subsection name="Using a service">
                <p>
                    An example of InsertServide is given in the HTML plugin,
                    by the <code>editor_portlet_html.html</code> template.
                </p>
            </subsection>
            <subsection name="Submitting a link to insertion service">
                <p>
                    Calling the <code>GetAvailableServices.jsp</code> JSP,
                    by using ,for example, the following code : 
                </p>
                <p> 
                    <div class="source">
                        <pre>
function create_insert_window()
{
   var url="GetAvailableServices.jsp";
   var nom = "Link or code HTML";
   child = window.open(url,'','toolbar=no, scrollbars=yes, status=no, location=no, directories=no, menubar=no, width=450, height=350');
   child.focus();
}

&lt;a href="#" onClick="create_insert_window();"&gt;Insert Link or HTML&lt;/a&gt;
                        </pre>
                    </div>
                </p>
            </subsection>

            <subsection name="Providing a insert_html() method">
                <p>
                    It refers to providing a javascript function <code>insert_html</code>
                    in the calling page, which adds HTML code returned by the insertion service.
                </p>
                <p>
                    example for an HTML portlet :
                </p>
                <p>
                    <div class="source">
                        <pre>
function insert_html(strHTMLToInsert)

{
   //TEXT
   document.Form.html_content.value = document.Form.html_content.value + strHTMLToInsert;

   //HTML
   theDoc.innerHTML=theDoc.innerHTML+ strHTMLToInsert;
}
                        </pre>
                    </div>
                </p>
            </subsection>
        </section>
    </body>
</document>
